# used to create the object
name: KHRBalance

physics_engine: ${..physics_engine}

env:
  numEnvs: ${resolve_default:4096,${...num_envs}}
  envSpacing: 1.  # [m]
  enableDebugVis: False
  randomInitialize: True


  # clipObservations: 5.0
  # clipActions: 5.0

  plane:
    staticFriction: 1.0  # [-]
    dynamicFriction: 1.0  # [-]
    restitution: 0.        # [-]

  baseInitState:
    pos: [0.0, 0.0, 0.32] # x,y,z [m]
    rot: [0.0, 0.0, 0.0, 1.0] # x,y,z,w [quat]
    vLinear: [0.0, 0.0, 0.0]  # x,y,z [m/s]
    vAngular: [0.0, 0.0, 0.0]  # x,y,z [rad/s]
    initDroppingStep: 0 # step

  baseTargetState:
    pos: [0.0, 0.0, 0.303] # x,y,z [m]
    rot: [0.0, 0.0, 0.0, 1.0] # x,y,z,w [quat]
    vLinear: [0.0, 0.0, 0.0]  # x,y,z [m/s]
    vAngular: [0.0, 0.0, 0.0]  # x,y,z [rad/s]

  control:
    # PD Drive parameters:
    stiffness: 10.0  # [N*m/rad]
    damping: 0.03     # [N*m*s/rad]
    actionScale: 0.279252  # 16 * pi / 180
    # actionScale: 0.279252  # 16 * pi / 180
    controlFrequencyInv: 8 # 0.02, 50 Hz
    torqueLimit: 2.5 # N*m, spec sheet : 2.4525 N*m, 25.0 kgf * cm
    prevActionBuffer: 0

  defaultJointAngles:  # = target angles when action = 0.0
    LARM_JOINT0: 0.0  # [deg]   -3.1416 ~ 0.7854
    LARM_JOINT1: 0.0  # [deg]   -0.5236 ~ 3.1416
    LARM_JOINT2: 0.0  # [deg]   -2.0944 ~ 0.0

    LLEG_JOINT0: 0.0  # [deg]   -0.2618 ~ 0.5236
    LLEG_JOINT1: -25.0  # [deg] -1.5708 ~ 1.5708
    LLEG_JOINT2: 50.0  # [deg]  0.0 ~ 2.6180
    LLEG_JOINT3: -25.0  # [deg] -1.8236 ~ 2.3561
    LLEG_JOINT4: 0.0  # [deg]   -0.5236 ~ 0.0

    RARM_JOINT0: 0.0  # [deg]   -3.1416 ~ 0.7854
    RARM_JOINT1: 0.0  # [deg]   -3.1416 ~ 0.5236
    RARM_JOINT2: 0.0  # [deg]   -2.0944 ~ 0.0

    RLEG_JOINT0: 0.0  # [deg]   -0.5236 ~ 0.2518
    RLEG_JOINT1: -25.0  # [deg] -1.5708 ~ 1.5708
    RLEG_JOINT2: 50.0  # [deg]  0.0 ~ 2.6108
    RLEG_JOINT3: -25.0  # [deg] -1.8236 ~ 2.3561
    RLEG_JOINT4: 0.0  # [deg]   0.0 ~ 0.5236

    # LARM_JOINT0: 0.0  # [deg]
    # LARM_JOINT1: 0.0  # [deg]
    # LARM_JOINT2: 0.0  # [deg]

    # LLEG_JOINT0: 0.0  # [deg]
    # LLEG_JOINT1: 0.0  # [deg]
    # LLEG_JOINT2: 0.0  # [deg]
    # LLEG_JOINT3: 0.0  # [deg]
    # LLEG_JOINT4: 0.0  # [deg]

    # RARM_JOINT0: 0.0  # [deg]
    # RARM_JOINT1: 0.0  # [deg]
    # RARM_JOINT2: 0.0  # [deg]

    # RLEG_JOINT0: 0.0  # [deg]
    # RLEG_JOINT1: 0.0  # [deg]
    # RLEG_JOINT2: 0.0  # [deg]
    # RLEG_JOINT3: 0.0  # [deg]
    # RLEG_JOINT4: 0.0  # [deg]

  urdfAsset:
    collapseFixedJoints: True
    fixBaseLink: False
    defaultDofDriveMode: 0 # see GymDofDriveModeFlags (0 is none, 1 is pos tgt, 2 is vel tgt, 4 effort)

  assetOptions:
    maxLinearVelocity: 10.0
    maxAngularVelocity: 10.0
    linearDamping: 0.0
    angularDamping: 0.0
    armature: 0.0
    thickness: 0.0001
    disableGravity: False


  learn:
    # rewards
    uprightRewardScale: 0.3
    headingRewardScale: 0.3
    dofPosErrorRewardScale: 0.4

    # penalty
    torques: 0.001
    linearVelocity: 0.1

    # normalization
    linearVelocityScale: 1.0
    angularVelocityScale: 0.3183 # 1 / pi
    dofPositionScale: 1.0
    dofVelocityScale: 1.0 # 0.05

    # episode length in seconds
    episodeLength_s: 20

    # push robot
    pushRobots: True
    pushInterval_s: 8

  # viewer cam:
  viewer:
    refEnv: 0
    # pos: [-0.5, -0.5, 0.5]  # [m]
    # lookat: [-0.5, 1.0, 0.2]  # [m]
    pos: [-0.5, -0.5, 0.5]  # [m]
    lookat: [1.0, 1.0, 0.2]  # [m]

  # set to True if you use camera sensors in the environment
  enableCameraSensors: False

sim:
  dt: 0.0025
  substeps: 2
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 4
    num_velocity_iterations: 1
    contact_offset: 0.02
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 100.0 # TODO: modify good value
    default_buffer_size_multiplier: 5.0
    max_gpu_contact_pairs: 8388608 # 8*1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 1 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (default - all contacts)

task:
  randomize: True
  randomization_params:
    frequency: 600   # Define how many environment steps between generating new randomizations
    observations:
      range: [0, .002] # range for the white noise
      operation: "additive"
      distribution: "gaussian"
    actions:
      range: [0., .02]
      operation: "additive"
      distribution: "gaussian"
    sim_params: 
      gravity:
        range: [0, 0.4]
        operation: "additive"
        distribution: "gaussian"
        schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
        schedule_steps: 3000
    actor_params:
      khr:
        color: True
        rigid_body_properties:
          mass: 
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
            schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
            schedule_steps: 3000
        rigid_shape_properties:
          friction:
            num_buckets: 500
            range: [0.7, 1.3]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          restitution:
            range: [0., 0.7]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
        dof_properties:
          damping: 
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          stiffness: 
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          lower:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          upper:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
