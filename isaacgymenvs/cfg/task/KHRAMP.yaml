# used to create the object
name: KHRAMP

physics_engine: ${..physics_engine}

# if given, will override the device setting in gym.
env: 
  numEnvs: ${resolve_default:4096,${...num_envs}}
  envSpacing: 1.0
  # episodeLength: 300
  episodeLength: 300
  cameraFollow: False # if the camera follows khr or not
  enableDebugVis: False

  control:
    pdControl: True
    Kp: 10.0
    Kd: 0.03
    actionScale: 0.279252  # 16 * pi / 180
    # actionScale: 2.0  # 16 * pi / 180
    torqueLimit: 2.5 # N*m, spec sheet : 2.4525 N*m, 25.0 kgf * cm

  controlFrequencyInv: 2 # 30 Hz TODO: modify for khr control
  # powerScale: 1.0
  stateInit: "Random"
  hybridInitProb: 0.5
  numAMPObsSteps: 2

  localRootObs: False
  contactBodies: ["LLEG_LINK3", "LLEG_LINK4","RLEG_LINK3", "RLEG_LINK4"]
  terminationHeight: 0.075 # TODO: khr
  enableEarlyTermination: True # TODO

  # animation files to learn from
  # these motions should use hyperparameters from KHRAMPPPO.yaml
  #motion_file: "amp_khr_walk.npy"
  motion_file: "07_08.npz" # TODO: modify for khr
  #motion_file: "amp_khr_dance.npy"

  # these motions should use hyperparameters from KHRAMPPPOLowGP.yaml
  #motion_file: "amp_khr_hop.npy"
  #motion_file: "amp_khr_backflip.npy"

  asset:
    # assetFileName: "urdf/khr/khr.urdf"
    assetFileName: "urdf/khr/khr_set_limit_joint.urdf"
    # assetFileName: "urdf/khr/khr_set_limit_joint_w_small_foot_ver1.urdf"

  plane:
    staticFriction: 1.0
    dynamicFriction: 1.0
    restitution: 0.0

sim:
  dt: 0.0166 # 1/60 s # TODO: modify
  substeps: 2
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 4
    num_velocity_iterations: 0
    contact_offset: 0.02
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    # max_depenetration_velocity: 10.0 # TODO
    max_depenetration_velocity: 1.0
    default_buffer_size_multiplier: 5.0
    max_gpu_contact_pairs: 8388608 # 8*1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 2 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (default - all contacts)

task:
  randomize: False
  randomization_params:
    # specify which attributes to randomize for each actor type and property
    frequency: 600   # Define how many environment steps between generating new randomizations
    observations:
      range: [0, .002] # range for the white noise
      operation: "additive"
      distribution: "gaussian"
    actions:
      range: [0., .02]
      operation: "additive"
      distribution: "gaussian"
    sim_params: 
      gravity:
        range: [0, 0.4]
        operation: "additive"
        distribution: "gaussian"
        schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
        schedule_steps: 3000
    actor_params:
      khr:
        color: True
        rigid_body_properties:
          mass: 
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
            schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
            schedule_steps: 3000
        rigid_shape_properties:
          friction:
            num_buckets: 500
            range: [0.7, 1.3]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          restitution:
            range: [0., 0.7]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
        dof_properties:
          damping: 
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          stiffness: 
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          lower:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          upper:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000

